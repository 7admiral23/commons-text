/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 15 00:54:51 GMT 2024
 */

package org.apache.commons.text.diff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.text.diff.EditScript;
import org.apache.commons.text.diff.StringsComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringsComparator_ESTest extends StringsComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringsComparator stringsComparator0 = new StringsComparator("org.apache.commons.text.diff.StringsComparator$Snake", "w8&'*c'*fbO-w@gqXE");
      stringsComparator0.getScript();
      stringsComparator0.getScript();
      stringsComparator0.getScript();
      stringsComparator0.getScript();
      stringsComparator0.getScript();
      stringsComparator0.getScript();
      stringsComparator0.getScript();
      stringsComparator0.getScript();
      // Undeclared exception!
      stringsComparator0.getScript();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringsComparator stringsComparator0 = null;
      try {
        stringsComparator0 = new StringsComparator((String) null, "$,oR[Kij");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.diff.StringsComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringsComparator stringsComparator0 = new StringsComparator("", "");
      EditScript<Character> editScript0 = stringsComparator0.getScript();
      assertEquals(0, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringsComparator stringsComparator0 = new StringsComparator("2", "");
      EditScript<Character> editScript0 = stringsComparator0.getScript();
      assertEquals(1, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringsComparator stringsComparator0 = new StringsComparator("org.apache.commons.text.diff.DeleteCommand", "C.ed[");
      EditScript<Character> editScript0 = stringsComparator0.getScript();
      assertEquals(41, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringsComparator stringsComparator0 = new StringsComparator("org.apache.commons.text.diff.EditCommand", "org.apache.commons.text.diff.DeleteCommand");
      EditScript<Character> editScript0 = stringsComparator0.getScript();
      assertEquals(8, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringsComparator stringsComparator0 = new StringsComparator("D_t", "D_t");
      EditScript<Character> editScript0 = stringsComparator0.getScript();
      assertEquals(0, editScript0.getModifications());
  }
}
