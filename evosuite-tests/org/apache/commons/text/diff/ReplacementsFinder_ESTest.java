/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 15 00:52:35 GMT 2024
 */

package org.apache.commons.text.diff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.text.diff.ReplacementsFinder;
import org.apache.commons.text.diff.ReplacementsHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReplacementsFinder_ESTest extends ReplacementsFinder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReplacementsHandler<Integer> replacementsHandler0 = (ReplacementsHandler<Integer>) mock(ReplacementsHandler.class, new ViolatedAssumptionAnswer());
      ReplacementsFinder<Integer> replacementsFinder0 = new ReplacementsFinder<Integer>(replacementsHandler0);
      Integer integer0 = new Integer(0);
      replacementsFinder0.visitInsertCommand(integer0);
      replacementsFinder0.visitKeepCommand(integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReplacementsHandler<Object> replacementsHandler0 = (ReplacementsHandler<Object>) mock(ReplacementsHandler.class, new ViolatedAssumptionAnswer());
      ReplacementsFinder<Object> replacementsFinder0 = new ReplacementsFinder<Object>(replacementsHandler0);
      Object object0 = new Object();
      replacementsFinder0.visitKeepCommand(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReplacementsHandler<Integer> replacementsHandler0 = (ReplacementsHandler<Integer>) mock(ReplacementsHandler.class, new ViolatedAssumptionAnswer());
      ReplacementsFinder<Integer> replacementsFinder0 = new ReplacementsFinder<Integer>(replacementsHandler0);
      Integer integer0 = new Integer(440);
      replacementsFinder0.visitDeleteCommand(integer0);
      replacementsFinder0.visitKeepCommand(integer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ReplacementsFinder<Object> replacementsFinder0 = new ReplacementsFinder<Object>((ReplacementsHandler<Object>) null);
      replacementsFinder0.visitInsertCommand((Object) null);
      // Undeclared exception!
      try { 
        replacementsFinder0.visitKeepCommand((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.diff.ReplacementsFinder", e);
      }
  }
}
