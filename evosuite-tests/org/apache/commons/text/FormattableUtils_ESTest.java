/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 15 00:58:22 GMT 2024
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.FormatFlagsConversionMismatchException;
import java.util.Formattable;
import java.util.Formatter;
import java.util.FormatterClosedException;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.text.FormattableUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormattableUtils_ESTest extends FormattableUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", formatter0, (-1105), (-1105), 1, 'V', (CharSequence) "null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis 'null' exceeds precision of 1
         //
         verifyException("org.apache.commons.text.FormattableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("Lw m K4Nt(", "Lw m K4Nt(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Formatter formatter0 = new Formatter((Appendable) mockPrintStream0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", formatter0, 0, 32, 0, (CharSequence) "Lw m K4Nt(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis 'Lw m K4Nt(' exceeds precision of 0
         //
         verifyException("org.apache.commons.text.FormattableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(141);
      Formatter formatter0 = new Formatter();
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 5694, 52, 141, '7', (CharSequence) charBuffer0);
      assertSame(formatter1, formatter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      String string0 = FormattableUtils.toString(formattable0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Formatter formatter0 = new Formatter((Locale) null);
      Formatter formatter1 = FormattableUtils.append((CharSequence) "null", formatter0, 0, 0, 0, 't');
      assertEquals("", formatter1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Formatter formatter0 = new Formatter();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 417, 417, 417, (CharSequence) charBuffer0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ' '
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = 'f';
      charArray0[1] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Formatter formatter0 = new Formatter();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 417, 417, 417, (CharSequence) charBuffer0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%f'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputStream outputStream0 = OutputStream.nullOutputStream();
      Formatter formatter0 = new Formatter(outputStream0);
      formatter0.close();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", formatter0, (-2355), (-2355), (-2355), (CharSequence) "null");
        fail("Expecting exception: FormatterClosedException");
      
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(76);
      Formatter formatter0 = new Formatter(charBuffer0, (Locale) null);
      charBuffer0.limit(7);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 1377, 76, 76, (CharSequence) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 45, 57, (-4268), '%', (CharSequence) charBuffer0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.close();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", formatter0, 13, 1731, 510, 't', (CharSequence) "null");
        fail("Expecting exception: FormatterClosedException");
      
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "null");
      Locale locale0 = Locale.ITALY;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", formatter0, 2835, 2, 2835, 'z', (CharSequence) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) null, formatter0, (-630), 37, (-630), 'L', (CharSequence) charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 1, 885, 129, '%');
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("0(K%gh2{e(T4");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 32, (-3140), '1');
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%g'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.close();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", formatter0, 1, 1, 1, '>');
        fail("Expecting exception: FormatterClosedException");
      
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Locale locale0 = Locale.KOREAN;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 59, 59, 59, ')');
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Formatter formatter0 = new Formatter(locale0);
      FormattableUtils.append((CharSequence) "null", formatter0, (-263), 5194, (-1812));
      // Undeclared exception!
      FormattableUtils.append((CharSequence) "null", formatter0, (-263), 5194, (-263));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      char[] charArray0 = new char[5];
      charArray0[4] = '%';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer1, formatter0, (-785), 76, (-1));
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ' '
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      formatter0.close();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 2, (-3061));
        fail("Expecting exception: FormatterClosedException");
      
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "null");
      Locale locale0 = Locale.GERMAN;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", formatter0, (-2055), 1946, (-2055));
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 1, 0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "v.UxrT*<!\"6%(b", formatter0, 0, 0, (-549), '.', (CharSequence) charBuffer0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = b, Flags = (
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(141);
      Formatter formatter0 = new Formatter();
      CharBuffer charBuffer1 = CharBuffer.allocate(20);
      FormattableUtils.append((CharSequence) charBuffer0, formatter0, 835, 835, 32, 'V', (CharSequence) charBuffer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      CharBuffer charBuffer1 = CharBuffer.allocate(76);
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer1, formatter0, 76, 0, 0, 'Q', (CharSequence) null);
      assertEquals("", formatter1.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      CharBuffer charBuffer1 = CharBuffer.allocate(76);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer1, formatter0, 0, 76, 1, 'Q', (CharSequence) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", (Formatter) null, (-1), (-1), (-1), (CharSequence) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Formatter formatter0 = new Formatter(locale0);
      FormattableUtils.append((CharSequence) "null", formatter0, (-1812), (-263), 5194, (CharSequence) "null");
      assertEquals("null", formatter0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) null, (Formatter) null, (-1), (-1), (-1), ',');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = FormattableUtils.toString((Formattable) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) null, (Formatter) null, 24, 24, (-427));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
