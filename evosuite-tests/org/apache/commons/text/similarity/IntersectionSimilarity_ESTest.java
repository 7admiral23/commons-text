/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 15 01:37:08 GMT 2024
 */

package org.apache.commons.text.similarity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.Function;
import org.apache.commons.text.similarity.IntersectionResult;
import org.apache.commons.text.similarity.IntersectionSimilarity;
import org.apache.commons.text.similarity.RegexTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntersectionSimilarity_ESTest extends IntersectionSimilarity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RegexTokenizer regexTokenizer0 = RegexTokenizer.INSTANCE;
      Function<Object, Collection<IntersectionResult>> function0 = (Function<Object, Collection<IntersectionResult>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<CharSequence, Collection<IntersectionResult>> function1 = regexTokenizer0.andThen((Function<? super CharSequence[], ? extends Collection<IntersectionResult>>) function0);
      IntersectionSimilarity<IntersectionResult> intersectionSimilarity0 = new IntersectionSimilarity<IntersectionResult>(function1);
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      // Undeclared exception!
      try { 
        intersectionSimilarity0.apply(charBuffer1, charBuffer0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.apache.commons.text.similarity.RegexTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RegexTokenizer regexTokenizer0 = new RegexTokenizer();
      Function<Object, Collection<IntersectionResult>> function0 = (Function<Object, Collection<IntersectionResult>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<CharSequence, Collection<IntersectionResult>> function1 = regexTokenizer0.andThen((Function<? super CharSequence[], ? extends Collection<IntersectionResult>>) function0);
      IntersectionSimilarity<IntersectionResult> intersectionSimilarity0 = new IntersectionSimilarity<IntersectionResult>(function1);
      CharBuffer charBuffer0 = CharBuffer.allocate(885);
      // Undeclared exception!
      try { 
        intersectionSimilarity0.apply(charBuffer0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input cannot be null
         //
         verifyException("org.apache.commons.text.similarity.IntersectionSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RegexTokenizer regexTokenizer0 = new RegexTokenizer();
      Function<Object, Collection<IntersectionResult>> function0 = (Function<Object, Collection<IntersectionResult>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<CharSequence, Collection<IntersectionResult>> function1 = regexTokenizer0.andThen((Function<? super CharSequence[], ? extends Collection<IntersectionResult>>) function0);
      IntersectionSimilarity<IntersectionResult> intersectionSimilarity0 = new IntersectionSimilarity<IntersectionResult>(function1);
      // Undeclared exception!
      try { 
        intersectionSimilarity0.apply((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input cannot be null
         //
         verifyException("org.apache.commons.text.similarity.IntersectionSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IntersectionSimilarity<IntersectionResult> intersectionSimilarity0 = null;
      try {
        intersectionSimilarity0 = new IntersectionSimilarity<IntersectionResult>((Function<CharSequence, Collection<IntersectionResult>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Converter must not be null
         //
         verifyException("org.apache.commons.text.similarity.IntersectionSimilarity", e);
      }
  }
}
