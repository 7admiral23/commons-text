/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 10 18:43:49 GMT 2024
 */

package org.apache.commons.text.similarity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.text.similarity.LongestCommonSubsequenceDistance;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongestCommonSubsequenceDistance_ESTest extends LongestCommonSubsequenceDistance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LongestCommonSubsequenceDistance longestCommonSubsequenceDistance0 = new LongestCommonSubsequenceDistance();
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Integer integer0 = longestCommonSubsequenceDistance0.apply(charBuffer0, charBuffer0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LongestCommonSubsequenceDistance longestCommonSubsequenceDistance0 = new LongestCommonSubsequenceDistance();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Integer integer0 = longestCommonSubsequenceDistance0.apply(charBuffer0, charBuffer0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LongestCommonSubsequenceDistance longestCommonSubsequenceDistance0 = new LongestCommonSubsequenceDistance();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1, 1);
      Integer integer0 = longestCommonSubsequenceDistance0.apply(charBuffer1, charBuffer0);
      assertEquals(9, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LongestCommonSubsequenceDistance longestCommonSubsequenceDistance0 = new LongestCommonSubsequenceDistance();
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.compact();
      // Undeclared exception!
      try { 
        longestCommonSubsequenceDistance0.apply(charBuffer1, charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LongestCommonSubsequenceDistance longestCommonSubsequenceDistance0 = new LongestCommonSubsequenceDistance();
      CharBuffer charBuffer0 = CharBuffer.allocate(4890);
      // Undeclared exception!
      longestCommonSubsequenceDistance0.apply(charBuffer0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LongestCommonSubsequenceDistance longestCommonSubsequenceDistance0 = new LongestCommonSubsequenceDistance();
      CharBuffer charBuffer0 = CharBuffer.allocate(3798);
      // Undeclared exception!
      try { 
        longestCommonSubsequenceDistance0.apply(charBuffer0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inputs must not be null
         //
         verifyException("org.apache.commons.text.similarity.LongestCommonSubsequenceDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LongestCommonSubsequenceDistance longestCommonSubsequenceDistance0 = new LongestCommonSubsequenceDistance();
      // Undeclared exception!
      try { 
        longestCommonSubsequenceDistance0.apply((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inputs must not be null
         //
         verifyException("org.apache.commons.text.similarity.LongestCommonSubsequenceDistance", e);
      }
  }
}
