/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 10 18:23:44 GMT 2024
 */

package org.apache.commons.text.similarity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.text.similarity.CosineSimilarity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CosineSimilarity_ESTest extends CosineSimilarity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CosineSimilarity cosineSimilarity0 = new CosineSimilarity();
      HashMap<CharSequence, Integer> hashMap0 = new HashMap<CharSequence, Integer>();
      Integer integer0 = new Integer(1118);
      hashMap0.put((CharSequence) null, integer0);
      Double double0 = cosineSimilarity0.cosineSimilarity(hashMap0, hashMap0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CosineSimilarity cosineSimilarity0 = new CosineSimilarity();
      HashMap<CharSequence, Integer> hashMap0 = new HashMap<CharSequence, Integer>();
      HashMap<CharSequence, Integer> hashMap1 = new HashMap<CharSequence, Integer>();
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 0);
      Integer integer0 = new Integer(1);
      hashMap1.putIfAbsent(charBuffer0, integer0);
      Integer integer1 = new Integer((-1));
      hashMap0.put(charBuffer0, integer1);
      Double double0 = cosineSimilarity0.cosineSimilarity(hashMap1, hashMap0);
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CosineSimilarity cosineSimilarity0 = new CosineSimilarity();
      HashMap<CharSequence, Integer> hashMap0 = new HashMap<CharSequence, Integer>();
      hashMap0.put((CharSequence) null, (Integer) null);
      // Undeclared exception!
      try { 
        cosineSimilarity0.cosineSimilarity(hashMap0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.similarity.CosineSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CosineSimilarity cosineSimilarity0 = new CosineSimilarity();
      HashMap<CharSequence, Integer> hashMap0 = new HashMap<CharSequence, Integer>();
      CharBuffer charBuffer0 = CharBuffer.allocate(283);
      Integer integer0 = new Integer(283);
      hashMap0.put(charBuffer0, integer0);
      HashMap<CharSequence, Integer> hashMap1 = new HashMap<CharSequence, Integer>();
      Double double0 = cosineSimilarity0.cosineSimilarity(hashMap0, hashMap1);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CosineSimilarity cosineSimilarity0 = new CosineSimilarity();
      HashMap<CharSequence, Integer> hashMap0 = new HashMap<CharSequence, Integer>();
      // Undeclared exception!
      try { 
        cosineSimilarity0.cosineSimilarity(hashMap0, (Map<CharSequence, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Vectors must not be null
         //
         verifyException("org.apache.commons.text.similarity.CosineSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CosineSimilarity cosineSimilarity0 = new CosineSimilarity();
      // Undeclared exception!
      try { 
        cosineSimilarity0.cosineSimilarity((Map<CharSequence, Integer>) null, (Map<CharSequence, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Vectors must not be null
         //
         verifyException("org.apache.commons.text.similarity.CosineSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CosineSimilarity cosineSimilarity0 = new CosineSimilarity();
      HashMap<CharSequence, Integer> hashMap0 = new HashMap<CharSequence, Integer>();
      Double double0 = cosineSimilarity0.cosineSimilarity(hashMap0, hashMap0);
      assertEquals(0.0, (double)double0, 0.01);
  }
}
