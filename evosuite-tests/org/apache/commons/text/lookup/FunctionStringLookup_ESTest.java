/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 15 00:25:56 GMT 2024
 */

package org.apache.commons.text.lookup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import org.apache.commons.text.lookup.FunctionStringLookup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionStringLookup_ESTest extends FunctionStringLookup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      FunctionStringLookup<String> functionStringLookup0 = FunctionStringLookup.on(function0);
      String string0 = functionStringLookup0.lookup("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)hashMap0.entrySet();
      FunctionStringLookup<Object> functionStringLookup0 = FunctionStringLookup.on((Map<String, Object>) hashMap0);
      hashMap0.put("", set0);
      // Undeclared exception!
      try { 
        functionStringLookup0.lookup("");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FunctionStringLookup<Object> functionStringLookup0 = FunctionStringLookup.on((Function<String, Object>) null);
      String string0 = functionStringLookup0.lookup("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      FunctionStringLookup<String> functionStringLookup0 = FunctionStringLookup.on(function0);
      String string0 = functionStringLookup0.lookup("null:");
      assertNotNull(string0);
      assertEquals("null:", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FunctionStringLookup<Object> functionStringLookup0 = FunctionStringLookup.on((Function<String, Object>) null);
      String string0 = functionStringLookup0.toString();
      assertNotNull(string0);
  }
}
