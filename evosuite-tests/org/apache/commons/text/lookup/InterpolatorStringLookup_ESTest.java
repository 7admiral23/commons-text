/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 10 18:01:16 GMT 2024
 */

package org.apache.commons.text.lookup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.text.lookup.FunctionStringLookup;
import org.apache.commons.text.lookup.InterpolatorStringLookup;
import org.apache.commons.text.lookup.LocalHostStringLookup;
import org.apache.commons.text.lookup.ScriptStringLookup;
import org.apache.commons.text.lookup.StringLookup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InterpolatorStringLookup_ESTest extends InterpolatorStringLookup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, FunctionStringLookup<Object>> hashMap0 = new HashMap<String, FunctionStringLookup<Object>>();
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, FunctionStringLookup<Object>>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      FunctionStringLookup<Object> functionStringLookup0 = FunctionStringLookup.on((Map<String, Object>) hashMap1);
      hashMap0.put("org.apache.commons.text.lookup.InterpolatorStringLookup", functionStringLookup0);
      String string0 = interpolatorStringLookup0.lookup("org.apache.commons.text.lookup.InterpolatorStringLookup");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, Object>) hashMap1);
      hashMap1.put("", "");
      String string0 = interpolatorStringLookup0.lookup("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScriptStringLookup scriptStringLookup0 = ScriptStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(scriptStringLookup0);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad script key format []; expected format is EngineName:Script.
         //
         verifyException("org.apache.commons.text.lookup.IllegalArgumentExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalHostStringLookup localHostStringLookup0 = LocalHostStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = null;
      try {
        interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, StringLookup>) null, localHostStringLookup0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.InterpolatorStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("DATE:]");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/time/FastDateFormat
         //
         verifyException("org.apache.commons.text.lookup.DateStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.lookup("::s<_`a");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.lookup((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      HashMap<String, StringLookup> hashMap0 = new HashMap<String, StringLookup>();
      InterpolatorStringLookup interpolatorStringLookup1 = new InterpolatorStringLookup(hashMap0, interpolatorStringLookup0, false);
      Map<String, StringLookup> map0 = interpolatorStringLookup1.getStringLookupMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      Map<String, StringLookup> map0 = interpolatorStringLookup0.getStringLookupMap();
      assertEquals(17, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((StringLookup) null);
      String string0 = interpolatorStringLookup0.lookup(":");
      assertNull(string0);
  }
}
