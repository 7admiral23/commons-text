/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 15 00:29:34 GMT 2024
 */

package org.apache.commons.text.lookup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.text.lookup.InterpolatorStringLookup;
import org.apache.commons.text.lookup.ResourceBundleStringLookup;
import org.apache.commons.text.lookup.StringLookup;
import org.apache.commons.text.lookup.UrlDecoderStringLookup;
import org.apache.commons.text.lookup.UrlStringLookup;
import org.apache.commons.text.lookup.XmlEncoderStringLookup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InterpolatorStringLookup_ESTest extends InterpolatorStringLookup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.lookup("Invalid date format: [%s]nK8X0Gjpnull");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      hashMap0.put("\u2014", hashMap1);
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, Object>) hashMap1);
      hashMap1.put("\u2014", hashMap0);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("\u2014");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlEncoderStringLookup xmlEncoderStringLookup0 = new XmlEncoderStringLookup();
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(xmlEncoderStringLookup0);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("|nd`'9Of09{kz!@K2");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.apache.commons.text.StringEscapeUtils
         //
         verifyException("org.apache.commons.text.lookup.XmlEncoderStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UrlDecoderStringLookup urlDecoderStringLookup0 = UrlDecoderStringLookup.INSTANCE;
      // Undeclared exception!
      try { 
        urlDecoderStringLookup0.lookup("?Jm+:C`|T{qlb+k8t,");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResourceBundleStringLookup resourceBundleStringLookup0 = ResourceBundleStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(resourceBundleStringLookup0);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("WfHkTn`a}0_qx|pZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad resource bundle key format [WfHkTn`a}0_qx|pZ]; expected format is BundleName:KeyName.
         //
         verifyException("org.apache.commons.text.lookup.IllegalArgumentExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UrlStringLookup urlStringLookup0 = UrlStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = null;
      try {
        interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, StringLookup>) null, urlStringLookup0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.InterpolatorStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((StringLookup) null);
      String string0 = interpolatorStringLookup0.lookup("t'@]fgTNDp5pDDI");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.lookup(":v&sv]UmK|<f^");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.lookup((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      Map<String, StringLookup> map0 = interpolatorStringLookup0.getStringLookupMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.toString();
      assertNotNull(string0);
  }
}
